{"version":3,"file":"index.js","sources":["../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype SyntaxPlugin = \"flow\" | \"typescript\" | \"jsx\" | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used to track whether the apostrophe \"`\"\n// starts or ends a string template\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true),\n};\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token. When the\n  // proposal settles on a token, the others can be merged with tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext === ct.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShift, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        this.state.start,\n        Errors.InvalidEscapedReservedWord,\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // the prevType is required by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {\n    // Token-specific context update code\n    // Note that we should avoid accessing `this.prodParam` in context update,\n    // because it is executed immediately when last token is consumed, which may be\n    // before `this.prodParam` is updated. e.g.\n    // ```\n    // function *g() { () => yield / 2 }\n    // ```\n    // When `=>` is eaten, the context update of `yield` is executed, however,\n    // `this.prodParam` still has `[Yield]` production because it is not yet updated\n    const { context, type } = this.state;\n    switch (type) {\n      case tt.braceR:\n        context.pop();\n        break;\n      // we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\n      // ideally only dollarBraceL \"${\" needs a non-template context\n      // in order to indicate that the last \"`\" in `${`\" starts a new string template\n      // inside a template element within outer string template.\n      // but when we popped such context in `}`, we lost track of whether this\n      // `}` matches a `${` or other tokens matching `}`, so we have to push\n      // such context in every token that `}` will match.\n      case tt.braceL:\n      case tt.braceHashL:\n      case tt.dollarBraceL:\n        context.push(ct.brace);\n        break;\n      case tt.backQuote:\n        if (context[context.length - 1] === ct.template) {\n          context.pop();\n        } else {\n          context.push(ct.template);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport {\n  isTokenType,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(\n          // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n          messageOrType,\n        )}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    // shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, Errors.DuplicateProto);\n      }\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.PatternIsOptional);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              specifier.start,\n              Errors.ImportBindingIsString,\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const curContext = context[context.length - 1];\n        if (curContext === tc.j_oTag) {\n          context.length -= 2;\n        } else if (curContext === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore the contexts do always exist.\ntc.j_oTag = new TokContext(\"<tag\");\ntc.j_cTag = new TokContext(\"</tag\");\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      super.updateContext(prevType);\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        context.push(\n          tc.j_expr, // treat as beginning of JSX expression\n          tc.j_oTag, // start opening tag context\n        );\n      } else if (type === tt.jsxTagEnd) {\n        const out = context.pop();\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n} from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(this.state.start, TSErrors.MissingInterfaceName);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.match(tt.lt)) {\n        let missingParenErrorPos;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorPos = this.state.pos;\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorPos) {\n          this.unexpected(missingParenErrorPos, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.match(tt.lt)) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          this.state.start,\n          TSErrors.AbstractPropertyHasInitializer,\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const pos = leftOfAs.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          pos,\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash =\n      hasPlugin(plugins, \"recordAndTuple\") &&\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n        }\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n      const { start } = left;\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(start, Errors.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  this.state.start,\n                  Errors.PipeBodyIsTighter,\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { start } = this.state;\n\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        start,\n        Errors.PipeUnparenthesizedBody,\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(start, Errors.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName =\n      !computed && this.match(tt.privateName) && this.state.value;\n    const property = computed\n      ? this.parseExpression()\n      : privateName\n      ? this.parsePrivateName()\n      : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          this.state.start,\n          Errors.PrivateInExpectedIn,\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types),\n  // and if the Hack-pipes proposal is active with ^ or % as its topicToken,\n  // then the ^ or % could be the topic token (e.g., in x |> ^==y or x |> ^===y),\n  // and so we reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”,\n      // so that the following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    start: number,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      let nodeType;\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        // The proposal must otherwise be \"hack\",\n        // as enforced by testTopicReferenceConfiguration.\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        // The topic reference is not allowed in the current context:\n        // it is outside of a pipe body.\n        // Raise recoverable errors.\n        if (pipeProposal === \"smart\") {\n          this.raise(start, Errors.PrimaryTopicNotAllowed);\n        } else {\n          // In this case, `pipeProposal === \"hack\"` is true.\n          this.raise(start, Errors.PipeTopicUnbound);\n        }\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        start,\n        Errors.PipeTopicUnconfiguredToken,\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    start: number,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        const pluginTopicToken = this.getPluginOption(\n          \"pipelineOperator\",\n          \"topicToken\",\n        );\n        return tokenLabelName(tokenType) === pluginTopicToken;\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(start, Errors.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyPos = this.state.start + 1;\n            this.raise(privateKeyPos, Errors.UnexpectedPrivateField);\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a Hack-style pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkHackPipeBodyEarlyErrors(startPos: number): void {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(startPos, Errors.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, Errors.PipelineTopicUnused);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (proposal === \"smart\") {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tt.privateName to tt.hash + tt.name for backward Babel 7 compat.\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (type === tt.privateName) {\n      if (!process.env.BABEL_8_BREAKING) {\n        const { loc, start, value, end } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(\n          i,\n          1,\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.hash),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc,\n          }),\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.name),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end,\n          }),\n        );\n        i++;\n        continue;\n      }\n    }\n    if (typeof type === \"number\") {\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        node.start,\n        Errors.IllegalBreakContinue,\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(start, Errors.ConstructorClassPrivateField);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","name","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","templates","keys","forEach","template","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","value","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","getExportedToken","isTokenType","obj","context","pop","tc","j_expr","j_oTag","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","pipeProposal","parseTopicReference","lookaheadCh","codePointAt","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","privateKeyPos","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","checkHackPipeBodyEarlyErrors","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}